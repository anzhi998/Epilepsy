package com.xjk.epilepsy.Fragments;
import android.app.Activity;
import android.graphics.Color;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;

import com.xjk.epilepsy.DetailActivity;
import com.xjk.epilepsy.R;
import com.xjk.epilepsy.Utils.BaseFragment;
import com.xjk.epilepsy.Utils.ConvertUtils;

import androidx.annotation.RequiresApi;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentActivity;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Vector;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.Viewport;
import lecho.lib.hellocharts.view.LineChartView;

public class BreChartFragment extends BaseFragment implements DetailActivity.myInterface{

    private ScheduledThreadPoolExecutor upDatePool;
    private LineChartView BreLine;
    private Vector<Double> oldBre;
    private Vector<Double> newBre;
    private boolean isAnanimation=false;
    private final int updateBre=11;
    @Override
    protected View initView() {
        View view = View.inflate(mContext, R.layout.fragment_brechart,null);
        return view;
    }

    private ArrayList<PointValue> generateData(Vector<Double> point){
        int length=point.size();
//        point= ConvertUtils.normalize(point);
        ArrayList<PointValue> values = new ArrayList<PointValue>();//折线上的点
        for(int i=0;i<length;i++){
            Double num=point.get(i);
            String data=num.toString();
            Float ans=Float.valueOf(data);
            values.add(new PointValue(i,ans));
        }
        return values;

    }
    public static BreChartFragment getInstance(){
        BreChartFragment frag=new BreChartFragment();
        return  frag;
    }
    @Override
    public void onStart() {
        super.onStart();
        BreLine=getActivity().findViewById(R.id.BreLine);
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }
    Runnable task=new Runnable() {
        @Override
        public void run() {
            Message message = new Message();
            message.what = updateBre;             //触发 handle UI更新线程
            handler.sendMessage(message);
        }
    };
    private Handler handler = new Handler(new Handler.Callback() {
        @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
        @Override
        public boolean handleMessage(Message message) {
            switch (message.what) {
                case updateBre:
                    updatePoints();
                    break;
                default:
                    break;
            }
            return true;  //false
        }
    });
    private void updatePoints(){
        int startIndex=oldBre.size()-newBre.size();
        if(startIndex>oldBre.size()-4) {
            return;
        }
        Double ele1=newBre.get(0);
        Double ele2=newBre.get(1);
        Double ele3=newBre.get(2);
        Double ele4=newBre.get(3);
//            Double ele2=newBre.get(1);
        oldBre.set(startIndex,ele1);
        oldBre.set(startIndex+1,ele2);
        oldBre.set(startIndex+2,ele3);
        oldBre.set(startIndex+3,ele4);
//            oldBre.set(startIndex+1,ele2);
        newBre.remove(0);
        newBre.remove(0);
        newBre.remove(0);
        newBre.remove(0);
//            newBre.remove(1);
        updateLineChart();

    }
    private void updateLineChart(){
        ArrayList<Line> lines=new ArrayList<Line>();
        Line line=new Line(generateData(oldBre)).setColor(Color.RED);
        line.setCubic(false);//设置是平滑的还是直的
        line.setHasPoints(false);
        line.setStrokeWidth(1);
        lines.add(line);
        BreLine.setInteractive(true);
        BreLine.setZoomType(ZoomType.VERTICAL);
        LineChartData data =new LineChartData();
        Axis axisX = new Axis();//x轴
        Axis axisY = new Axis();//y轴
        axisX.setAutoGenerated(true);
        axisY.setAutoGenerated(true);
        axisX.setHasLines(true);
        axisY.setHasLines(true);
        data.setAxisXBottom(axisX);
        data.setAxisYLeft(axisY);
        data.setLines(lines);
        BreLine.setLineChartData(data);
    }
    @Override
    public void onPointChanged(Vector<Vector<Double>> point) {
        newBre=point.get(0);
        if(BreLine==null){
            return;
        }
        if(oldBre==null){
            oldBre=newBre;
            updateLineChart();
        }
        else {
            if(!isAnanimation){

                isAnanimation=true;
            }else {
                return;
            }
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if(!upDatePool.isShutdown()){
            upDatePool.purge();
            upDatePool.shutdown();
        }
    }

    @Override
    public void needDraw(boolean need) {
        if(need){
            upDatePool = new ScheduledThreadPoolExecutor(2);
            isAnanimation=false;
        }else{
            upDatePool.purge();
            upDatePool.shutdownNow();
        }
    }
}